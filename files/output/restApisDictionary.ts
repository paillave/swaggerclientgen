//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import * as dataAccess from "../tools/dataAccess";
import * as Models from "./models";

export interface IRestApisDictionary {
    [key: string]: {
        [key: string]: dataAccess.IRestApi;
    };
}

export const RestApisDictionary: IRestApisDictionary = {
    Entities: {
        Get: {
            path: "/api/Entities/{id}",
            method: "GET"
        },
        Delete: {
            path: "/api/Entities/{id}",
            method: "DELETE"
        },
        GetAll: {
            path: "/api/Entities",
            method: "GET"
        },
        Save: {
            path: "/api/Entities",
            method: "POST"
        },
    },
    ProfileAccount: {
        Current: {
            path: "/api/ProfileAccount/Current",
            method: "GET"
        },
    },
    SampleData: {
        WeatherForecasts: {
            path: "/api/SampleData/WeatherForecasts",
            method: "GET"
        },
    },
    Securities: {
        Get: {
            path: "/api/Securities/{id}",
            method: "GET"
        },
        Delete: {
            path: "/api/Securities/{id}",
            method: "DELETE"
        },
        GetAll: {
            path: "/api/Securities",
            method: "GET"
        },
        Save: {
            path: "/api/Securities",
            method: "POST"
        },
    },
};

export interface IReferences {
    [key: string]: { 
        [id: number]: string;
    };
}

export interface IModelWithReferences<T> {
    model: T;
    references: IReferences;
}

export const RestOperators = {
    Entities: {
        Get: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<IModelWithReferences<Models.IEntityModel>, {}>(state$, RestApisDictionary.Entities.Get),
        Delete: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchNoData<{}>(state$, RestApisDictionary.Entities.Delete),
        GetAll: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<IModelWithReferences<[Models.IEntityModel]>, {}>(state$, RestApisDictionary.Entities.GetAll),
        Save: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<IModelWithReferences<Models.IEntityModel>, {}>(state$, RestApisDictionary.Entities.Save),
    },
    ProfileAccount: {
        Current: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<Models.IProfileModel, {}>(state$, RestApisDictionary.ProfileAccount.Current),
    },
    SampleData: {
        WeatherForecasts: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<[Models.IWeatherForecast], {}>(state$, RestApisDictionary.SampleData.WeatherForecasts),
    },
    Securities: {
        Get: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<IModelWithReferences<Models.ISecurityModel>, {}>(state$, RestApisDictionary.Securities.Get),
        Delete: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchNoData<{}>(state$, RestApisDictionary.Securities.Delete),
        GetAll: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<IModelWithReferences<[Models.ISecurityModel]>, {}>(state$, RestApisDictionary.Securities.GetAll),
        Save: (state$: dataAccess.IUserStateObservable) => dataAccess.fetchData<IModelWithReferences<Models.ISecurityModel>, {}>(state$, RestApisDictionary.Securities.Save),
    },
};
